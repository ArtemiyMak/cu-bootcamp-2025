from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
import time

from config import REPORT_PARAMETERS
from handlers.common import show_main_menu
from report_generator import report_gen, report_gen_gpt
from states import ReportInfo

router = Router()

@router.message(lambda message: message.text in [
    "üìù –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç—á–µ—Ç", "üìù Write a report", "üìù Scrivi un rapporto", "üìù Bericht schreiben"
])
async def start_report(message: Message, state: FSMContext) -> None:
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞."""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –∫—Ä–æ–º–µ —è–∑—ã–∫–∞
    language = (await state.get_data()).get("language", "ru")
    await state.clear()
    await state.update_data(current_step=0, answers={}, language=language)
    await ask_next_parameter(message, state)


async def ask_next_parameter(message: Message, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –æ—Ç—á–µ—Ç–∞."""
    user_data = await state.get_data()
    current_step = user_data.get("current_step", 0)
    language = user_data.get("language", "ru")

    if current_step < len(REPORT_PARAMETERS):
        parameter_name_ru, parameter_name_en, parameter_name_it, parameter_name_de, state_name = REPORT_PARAMETERS[current_step]
        parameter_name = (
            parameter_name_ru if language == "ru" else
            parameter_name_en if language == "en" else
            parameter_name_it if language == "it" else
            parameter_name_de
        )
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        example_texts = {
            "ru": [
                "15.03.2024",  # –î–∞—Ç–∞
                "18:00",       # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
                "19:00",       # –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
                "–ê–ª–µ–∫—Å–µ–π",     # –ò–º—è —É—á–µ–Ω–∏–∫–∞
                "12",          # –í–æ–∑—Ä–∞—Å—Ç
                "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞: –¥—Ä–æ–±–∏",  # –¢–µ–º–∞
                "–†–µ—à–∏—Ç—å –∑–∞–¥–∞—á–∏ 1-5 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ 42",  # –î–ó
                "–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, –±—ã–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ",  # –û—Ç–∑—ã–≤
                "–•–æ—Ä–æ—à–æ —É—Å–≤–∞–∏–≤–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª"  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            ],
            "en": [
                "15.03.2024",
                "6:00 PM",
                "7:00 PM",
                "Alex",
                "12",
                "Math: fractions",
                "Solve problems 1-5 on page 42",
                "Enjoyed it, was interesting",
                "Understands the material well"
            ],
            "it": [
                "15.03.2024",
                "18:00",
                "19:00",
                "Alessandro",
                "12",
                "Matematica: frazioni",
                "Risolvere i problemi 1-5 a pagina 42",
                "√à piaciuto, √® stato interessante",
                "Comprende bene il materiale"
            ],
            "de": [
                "15.03.2024",
                "18:00",
                "19:00",
                "Alexander",
                "12",
                "Mathematik: Br√ºche",
                "L√∂se Aufgaben 1-5 auf Seite 42",
                "Hat Spa√ü gemacht, war interessant",
                "Versteht das Material gut"
            ]
        }
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        alt_example_texts = {
            "ru": [
                "20.03.2024",  # –î–∞—Ç–∞
                "15:30",       # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
                "16:30",       # –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
                "–ú–∞—Ä–∏—è",       # –ò–º—è —É—á–µ–Ω–∏–∫–∞
                "14",          # –í–æ–∑—Ä–∞—Å—Ç
                "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã",  # –¢–µ–º–∞
                "–í—ã—É—á–∏—Ç—å 20 –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤ –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Å –Ω–∏–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",  # –î–ó
                "–ë—ã–ª–æ —Å–ª–æ–∂–Ω–æ, –Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ. –•–æ—á—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–∑—É—á–µ–Ω–∏–µ —Ç–µ–º—ã",  # –û—Ç–∑—ã–≤
                "–£—á–µ–Ω–∏—Ü–∞ —Å—Ç–∞—Ä–∞–µ—Ç—Å—è, –ø—Ä–æ—è–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å –∫ —è–∑—ã–∫—É"  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            ],
            "en": [
                "20.03.2024",
                "3:30 PM",
                "4:30 PM",
                "Mary",
                "14",
                "English: irregular verbs",
                "Learn 20 irregular verbs and make sentences with them",
                "It was challenging but interesting. Want to continue learning the topic",
                "The student tries hard and shows interest in the language"
            ],
            "it": [
                "20.03.2024",
                "15:30",
                "16:30",
                "Maria",
                "14",
                "Inglese: verbi irregolari",
                "Imparare 20 verbi irregolari e creare frasi con essi",
                "√à stato difficile ma interessante. Voglio continuare a studiare l'argomento",
                "La studentessa si impegna e mostra interesse per la lingua"
            ],
            "de": [
                "20.03.2024",
                "15:30",
                "16:30",
                "Maria",
                "14",
                "Englisch: unregelm√§√üige Verben",
                "Lerne 20 unregelm√§√üige Verben und bilde S√§tze mit ihnen",
                "Es war schwierig, aber interessant. Ich m√∂chte das Thema weiterhin studieren",
                "Die Sch√ºlerin strengt sich an und zeigt Interesse an der Sprache"
            ]
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
        example1 = example_texts[language][current_step]
        example2 = alt_example_texts[language][current_step]
        
        # –¢–µ–∫—Å—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏–º–µ—Ä–æ–≤
        example1_button_text = (
            f"üì§ –ü—Ä–∏–º–µ—Ä: {example1}" if language == "ru" else
            f"üì§ Example: {example1}" if language == "en" else
            f"üì§ Esempio: {example1}" if language == "it" else
            f"üì§ Beispiel: {example1}"
        )
        
        example2_button_text = (
            f"üì§ –ü—Ä–∏–º–µ—Ä 2: {example2}" if language == "ru" else
            f"üì§ Example 2: {example2}" if language == "en" else
            f"üì§ Esempio 2: {example2}" if language == "it" else
            f"üì§ Beispiel 2: {example2}"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏ "–ù–∞–∑–∞–¥"
        back_button_text = (
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if language == "ru" else
            "‚¨ÖÔ∏è Back" if language == "en" else
            "‚¨ÖÔ∏è Indietro" if language == "it" else
            "‚¨ÖÔ∏è Zur√ºck"
        )
        kb = [
            [KeyboardButton(text=example1_button_text)],
            [KeyboardButton(text=example2_button_text)],
            [KeyboardButton(text=back_button_text)]
        ]
        keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø—Ä–∏–º–µ—Ä—ã –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(
            current_state=state_name, 
            current_example=example1,
            current_example2=example2,
            example1_button=example1_button_text,
            example2_button=example2_button_text
        )
        
        await message.reply(
            f"–í–≤–µ–¥–∏—Ç–µ {parameter_name}:" if language == "ru" else
            f"Enter {parameter_name}:" if language == "en" else
            f"Inserisci {parameter_name}:" if language == "it" else
            f"Geben Sie {parameter_name} ein:", reply_markup=keyboard)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        state_attr = getattr(ReportInfo, state_name)
        await state.set_state(state_attr)
    else:
        await finish_report(message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@router.message(lambda message: message.text in [
    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "‚¨ÖÔ∏è Back", "‚¨ÖÔ∏è Indietro", "‚¨ÖÔ∏è Zur√ºck"
])
async def go_back(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞."""
    user_data = await state.get_data()
    current_step = user_data.get("current_step", 0)
    
    # –ï—Å–ª–∏ –º—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if current_step <= 1:
        await state.clear()
        await show_main_menu(message, state)
        return
    
    # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É
    await state.update_data(current_step=current_step - 1)
    await ask_next_parameter(message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.message(ReportInfo.waiting_for_date)
async def process_date(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —É—Ä–æ–∫–∞."""
    user_data = await state.get_data()
    answers = user_data.get("answers", {})
    answers["date"] = message.text
    await state.update_data(answers=answers)
    await state.update_data(current_step=user_data.get("current_step", 0) + 1)
    await ask_next_parameter(message, state)


@router.message(ReportInfo.waiting_for_start_time)
async def process_start_time(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫–∞."""
    user_data = await state.get_data()
    answers = user_data.get("answers", {})
    answers["start_time"] = message.text
    await state.update_data(answers=answers)
    await state.update_data(current_step=user_data.get("current_step", 0) + 1)
    await ask_next_parameter(message, state)


@router.message(ReportInfo.waiting_for_end_time)
async def process_end_time(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—Ä–æ–∫–∞."""
    user_data = await state.get_data()
    answers = user_data.get("answers", {})
    answers["end_time"] = message.text
    await state.update_data(answers=answers)
    await state.update_data(current_step=user_data.get("current_step", 0) + 1)
    await ask_next_parameter(message, state)


@router.message(ReportInfo.waiting_for_student_name)
async def process_student_name(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —É—á–µ–Ω–∏–∫–∞."""
    user_data = await state.get_data()
    answers = user_data.get("answers", {})
    answers["student_name"] = message.text
    await state.update_data(answers=answers)
    await state.update_data(current_step=user_data.get("current_step", 0) + 1)
    await ask_next_parameter(message, state)


@router.message(ReportInfo.waiting_for_student_age)
async def process_student_age(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ —É—á–µ–Ω–∏–∫–∞."""
    user_data = await state.get_data()
    answers = user_data.get("answers", {})
    answers["student_age"] = message.text
    await state.update_data(answers=answers)
    await state.update_data(current_step=user_data.get("current_step", 0) + 1)
    await ask_next_parameter(message, state)


@router.message(ReportInfo.waiting_for_lesson_topic)
async def process_lesson_topic(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–º—ã —É—Ä–æ–∫–∞."""
    user_data = await state.get_data()
    answers = user_data.get("answers", {})
    answers["lesson_topic"] = message.text
    await state.update_data(answers=answers)
    await state.update_data(current_step=user_data.get("current_step", 0) + 1)
    await ask_next_parameter(message, state)


@router.message(ReportInfo.waiting_for_homework)
async def process_homework(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è."""
    user_data = await state.get_data()
    answers = user_data.get("answers", {})
    answers["homework"] = message.text
    await state.update_data(answers=answers)
    await state.update_data(current_step=user_data.get("current_step", 0) + 1)
    await ask_next_parameter(message, state)


@router.message(ReportInfo.waiting_for_feedback)
async def process_feedback(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
    user_data = await state.get_data()
    answers = user_data.get("answers", {})
    answers["feedback"] = message.text
    await state.update_data(answers=answers)
    await state.update_data(current_step=user_data.get("current_step", 0) + 1)
    await ask_next_parameter(message, state)


@router.message(ReportInfo.waiting_for_comment)
async def process_comment(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞."""
    user_data = await state.get_data()
    answers = user_data.get("answers", {})
    answers["comment"] = message.text
    await state.update_data(answers=answers)
    await state.update_data(current_step=user_data.get("current_step", 0) + 1)
    await ask_next_parameter(message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏–º–µ—Ä–æ–≤
@router.message(lambda message: message.text and (
    message.text.startswith("üì§ –ü—Ä–∏–º–µ—Ä:") or 
    message.text.startswith("üì§ Example:") or 
    message.text.startswith("üì§ Esempio:") or 
    message.text.startswith("üì§ Beispiel:") or
    message.text.startswith("üì§ –ü—Ä–∏–º–µ—Ä 2:") or 
    message.text.startswith("üì§ Example 2:") or 
    message.text.startswith("üì§ Esempio 2:") or 
    message.text.startswith("üì§ Beispiel 2:")
))
async def send_example(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–∏–º–µ—Ä–æ–º –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞."""
    user_data = await state.get_data()
    language = user_data.get("language", "ru")
    current_state = user_data.get("current_state", "")
    current_step = user_data.get("current_step", 0)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –ø—Ä–∏–º–µ—Ä –±—ã–ª –≤—ã–±—Ä–∞–Ω
    button_text = message.text
    example_to_use = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞
    if button_text == user_data.get("example1_button", ""):
        example_to_use = user_data.get("current_example", "")
    elif button_text == user_data.get("example2_button", ""):
        example_to_use = user_data.get("current_example2", "")
    else:
        # –ï—Å–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –Ω–∏ –æ–¥–∏–Ω –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫,
        # –∏–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        parts = button_text.split(":", 1)
        if len(parts) > 1:
            example_to_use = parts[1].strip()
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ –∫–æ–Ω—Å–æ–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"--- SEND_EXAMPLE DEBUG ---")
    print(f"Button text: {button_text}")
    print(f"Example to use: {example_to_use}")
    print(f"Current state: {current_state}")
    print(f"Current step: {current_step}")
    
    if not example_to_use:
        await message.reply(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞." if language == "ru" else
            "‚ö†Ô∏è Error: could not determine the example. Please try again." if language == "en" else
            "‚ö†Ô∏è Errore: impossibile determinare l'esempio. Riprova." if language == "it" else
            "‚ö†Ô∏è Fehler: Das Beispiel konnte nicht ermittelt werden. Bitte versuchen Sie es erneut."
        )
        return
    
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–∞–∫–æ–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    await message.reply(
        f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏–º–µ—Ä: {example_to_use}" if language == "ru" else
        f"‚úÖ Using example: {example_to_use}" if language == "en" else
        f"‚úÖ Usando esempio: {example_to_use}" if language == "it" else
        f"‚úÖ Beispiel verwendet: {example_to_use}"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä –≤ –æ—Ç–≤–µ—Ç–∞—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    answers = user_data.get("answers", {})
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ current_state
    answer_key = None
    if current_state == "waiting_for_date":
        answer_key = "date"
    elif current_state == "waiting_for_start_time":
        answer_key = "start_time"
    elif current_state == "waiting_for_end_time":
        answer_key = "end_time"
    elif current_state == "waiting_for_student_name":
        answer_key = "student_name"
    elif current_state == "waiting_for_student_age":
        answer_key = "student_age"
    elif current_state == "waiting_for_lesson_topic":
        answer_key = "lesson_topic"
    elif current_state == "waiting_for_homework":
        answer_key = "homework"
    elif current_state == "waiting_for_feedback":
        answer_key = "feedback"
    elif current_state == "waiting_for_comment":
        answer_key = "comment"
    
    if answer_key:
        answers[answer_key] = example_to_use
        print(f"Saved example {example_to_use} as {answer_key}")
    else:
        print(f"Warning: could not determine answer key for state {current_state}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await state.update_data(answers=answers, current_step=current_step + 1)
    await ask_next_parameter(message, state)


async def finish_report(message: Message, state: FSMContext) -> None:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∏ –µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è."""
    user_data = await state.get_data()
    language = user_data.get("language", "ru")
    answers = user_data.get("answers", {})
    
    print(f"--- FINISH REPORT DEBUG ---")
    print(f"User data: {user_data}")
    print(f"Language: {language}")
    print(f"Answers: {answers}")
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ—Ç—á–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è
    waiting_message = await message.reply(
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –æ—Ç—á–µ—Ç..." if language == "ru" else
        "‚è≥ Please wait. Generating report..." if language == "en" else
        "‚è≥ Attendere prego. Generazione del rapporto in corso..." if language == "it" else
        "‚è≥ Bitte warten. Bericht wird generiert..."
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫
    await state.clear()
    await state.update_data(language=language)

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
    collected_parameters = []
    collected_answers = []

    param_names = {
        "date": ["–î–∞—Ç–∞ —É—Ä–æ–∫–∞", "Lesson date", "Data della lezione", "Datum der Stunde"],
        "start_time": ["–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫–∞", "Lesson start time", "Ora di inizio della lezione", "Startzeit der Stunde"],
        "end_time": ["–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—Ä–æ–∫–∞", "Lesson end time", "Ora di fine della lezione", "Endzeit der Stunde"],
        "student_name": ["–ò–º—è —É—á–µ–Ω–∏–∫–∞", "Student name", "Nome dello studente", "Name des Sch√ºlers"],
        "student_age": ["–í–æ–∑—Ä–∞—Å—Ç —É—á–µ–Ω–∏–∫–∞", "Student age", "Et√† dello studente", "Alter des Sch√ºlers"],
        "lesson_topic": ["–¢–µ–º–∞ —É—Ä–æ–∫–∞", "Lesson topic", "Argomento della lezione", "Thema der Stunde"],
        "homework": ["–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ", "Homework", "Compiti a casa", "Hausaufgaben"],
        "feedback": ["–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç —É—á–µ–Ω–∏–∫–∞", "Student feedback", "Feedback dello studente", "Feedback des Sch√ºlers"],
        "comment": ["–û–±—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞", "Tutor's comment", "Commento del tutor", "Kommentar des Tutors"]
    }

    lang_idx = 0 if language == "ru" else 1 if language == "en" else 2 if language == "it" else 3
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    for param_key, param_values in param_names.items():
        param_name = param_values[lang_idx]
        if param_key in answers and answers[param_key]:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä"
            answer_text = answers[param_key]
            if "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä" not in answer_text and "Send example" not in answer_text:
                collected_parameters.append(param_name)
                collected_answers.append(answer_text)
                print(f"Added parameter: {param_name} = {answer_text}")
            else:
                print(f"Skipping parameter {param_name} because it contains button text")
        else:
            print(f"Parameter {param_name} is missing in answers")
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    example_texts = {
        "ru": [
            "15.03.2024",  # –î–∞—Ç–∞
            "18:00",       # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
            "19:00",       # –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
            "–ê–ª–µ–∫—Å–µ–π",     # –ò–º—è —É—á–µ–Ω–∏–∫–∞
            "12",          # –í–æ–∑—Ä–∞—Å—Ç
            "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞: –¥—Ä–æ–±–∏",  # –¢–µ–º–∞
            "–†–µ—à–∏—Ç—å –∑–∞–¥–∞—á–∏ 1-5 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ 42",  # –î–ó
            "–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, –±—ã–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ",  # –û—Ç–∑—ã–≤
            "–•–æ—Ä–æ—à–æ —É—Å–≤–∞–∏–≤–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª"  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        ],
        "en": [
            "15.03.2024",
            "6:00 PM",
            "7:00 PM",
            "Alex",
            "12",
            "Math: fractions",
            "Solve problems 1-5 on page 42",
            "Enjoyed it, was interesting",
            "Understands the material well"
        ],
        "it": [
            "15.03.2024",
            "18:00",
            "19:00",
            "Alessandro",
            "12",
            "Matematica: frazioni",
            "Risolvere i problemi 1-5 a pagina 42",
            "√à piaciuto, √® stato interessante",
            "Comprende bene il materiale"
        ],
        "de": [
            "15.03.2024",
            "18:00",
            "19:00",
            "Alexander",
            "12",
            "Mathematik: Br√ºche",
            "L√∂se Aufgaben 1-5 auf Seite 42",
            "Hat Spa√ü gemacht, war interessant",
            "Versteht das Material gut"
        ]
    }
    
    # –ï—Å–ª–∏ –º–∞–ª–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∑–∞–ø–æ–ª–Ω—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø—Ä–∏–º–µ—Ä–∞–º–∏
    if len(collected_parameters) < 4:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ 4 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        examples = example_texts[language]
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ collected_parameters
        for i, (param_key, param_values) in enumerate(param_names.items()):
            param_name = param_values[lang_idx]
            if param_name not in collected_parameters and i < len(examples):
                collected_parameters.append(param_name)
                collected_answers.append(examples[i])
                print(f"Added example parameter: {param_name} = {examples[i]}")

    print(f"Final collected_parameters: {collected_parameters}")
    print(f"Final collected_answers: {collected_answers}")
    
    try:
        # –ù–∞—á–∞–ª–æ –æ—Ç—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        start_time = time.time()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Yandex GPT
        print("Calling report_gen (Yandex GPT)...")
        report = report_gen(collected_parameters, collected_answers, language)
        
        # –ö–æ–Ω–µ—Ü –æ—Ç—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        end_time = time.time()
        generation_time = round(end_time - start_time, 2)
        
        print(f"Generated report: {report[:100]}...")  # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç—á–µ—Ç–∞
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç"
        kb = [
            [KeyboardButton(text="üìù –ù–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç" if language == "ru" else 
                          "üìù Write a new report" if language == "en" else 
                          "üìù Scrivi un nuovo rapporto" if language == "it" else 
                          "üìù Neuen Bericht schreiben")]
        ]
        keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫ –æ—Ç—á–µ—Ç—É
        time_info = (
            f"\n\n‚è±Ô∏è –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ {generation_time} —Å–µ–∫—É–Ω–¥." if language == "ru" else
            f"\n\n‚è±Ô∏è Report generated in {generation_time} seconds." if language == "en" else
            f"\n\n‚è±Ô∏è Rapporto generato in {generation_time} secondi." if language == "it" else
            f"\n\n‚è±Ô∏è Bericht generiert in {generation_time} Sekunden."
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏
        await waiting_message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–µ–º–µ–Ω–∏
        await message.reply(
            "üìÑ –û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω:\n\n" + report + time_info if language == "ru" else
            "üìÑ Report generated:\n\n" + report + time_info if language == "en" else
            "üìÑ Rapporto generato:\n\n" + report + time_info if language == "it" else
            "üìÑ Bericht erstellt:\n\n" + report + time_info, reply_markup=keyboard)
    except Exception as e:
        print(f"Error generating report: {e}")
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏
        await waiting_message.delete()
        
        await message.reply(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞." if language == "ru" else
            "‚ö†Ô∏è An error occurred while generating the report. Please try again." if language == "en" else
            "‚ö†Ô∏è Si √® verificato un errore durante la generazione del rapporto. Si prega di riprovare." if language == "it" else
            "‚ö†Ô∏è Bei der Erstellung des Berichts ist ein Fehler aufgetreten. Bitte versuchen Sie es erneut.")

    # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–ø–∏—Å–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ 